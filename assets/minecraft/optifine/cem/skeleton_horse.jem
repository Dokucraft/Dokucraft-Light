{
	"credit": "By Ewan Howell",
	"textureSize": [64, 64],
	"models": [
		{
			"part": "body",
			"id": "body",
			"invertAxis": "xy",
			"translate": [0, -13, -6],
			"submodels": [
				{
					"id": "rotate",
					"invertAxis": "xy",
					"translate": [0, 0, 0],
					"submodels": [
						{
							"id": "translate",
							"invertAxis": "xy",
							"translate": [0, 0, 0],
							"submodels": [
								{
									"id": "physics_body",
									"invertAxis": "xy",
									"translate": [0, 16, 0],
									"boxes": [
										{
											"coordinates": [-5, -5, -11, 10, 10, 22],
											"uvNorth": [22, 54, 32, 64],
											"uvEast": [0, 54, 22, 64],
											"uvSouth": [54, 54, 64, 64],
											"uvWest": [32, 54, 54, 64],
											"uvUp": [32, 54, 22, 32],
											"uvDown": [42, 32, 32, 54],
											"sizeAdd": 0.05
										}
									]
								},
								{
									"id": "head_rear_cancel",
									"invertAxis": "xy",
									"translate": [0, 13, 6],
									"submodels": [
										{
											"id": "head2",
											"invertAxis": "xy",
											"translate": [0, 7, -17],
											"submodels": [
												{
													"id": "physics_head",
													"invertAxis": "xy",
													"translate": [0, 8.5, 1.5],
													"boxes": [
														{
															"coordinates": [-3, -2.5, -3.5, 6, 5, 7],
															"uvNorth": [7, 20, 13, 25],
															"uvEast": [0, 20, 7, 25],
															"uvSouth": [20, 20, 26, 25],
															"uvWest": [13, 20, 20, 25],
															"uvUp": [13, 20, 7, 13],
															"uvDown": [19, 13, 13, 20]
														}
													]
												},
												{
													"id": "physics_mouth",
													"invertAxis": "xy",
													"translate": [0, 8.5, -4.5],
													"boxes": [
														{
															"coordinates": [-2, -2.5, -2.5, 4, 5, 5],
															"uvNorth": [5, 30, 9, 35],
															"uvEast": [0, 30, 5, 35],
															"uvSouth": [14, 30, 18, 35],
															"uvWest": [9, 30, 14, 35],
															"uvUp": [9, 30, 5, 25],
															"uvDown": [13, 25, 9, 30]
														}
													]
												},
												{
													"id": "physics_neck",
													"invertAxis": "xy",
													"translate": [0, 0, 1.5],
													"boxes": [
														{
															"coordinates": [-2, -6, -3.5, 4, 12, 7],
															"uvNorth": [7, 42, 11, 54],
															"uvEast": [0, 42, 7, 54],
															"uvSouth": [18, 42, 22, 54],
															"uvWest": [11, 42, 18, 54],
															"uvUp": [11, 42, 7, 35],
															"uvDown": [15, 35, 11, 42]
														}
													]
												},
												{
													"id": "physics_mane",
													"invertAxis": "xy",
													"translate": [0, 3, 6],
													"boxes": [
														{
															"coordinates": [-1, -8, -1, 2, 16, 2],
															"uvNorth": [58, 38, 60, 54],
															"uvEast": [56, 38, 58, 54],
															"uvSouth": [62, 38, 64, 54],
															"uvWest": [60, 38, 62, 54],
															"uvUp": [60, 38, 58, 36],
															"uvDown": [62, 36, 60, 38]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"animations": [
				{
					"var.translate": "if(death_time > 0 && !is_in_water, frac(pos_y)*16, 0)",
					"var.rotate": "if(death_time > 0, -torad(min(sqrt((death_time - 1) / 20 * 1.6), 1) * 90), 0)",
					"rotate.rz": "var.rotate",
					"rotate2.rz": "var.rotate",
					"rotate3.rz": "var.rotate",
					"translate.ty": "var.translate",
					"translate2.ty": "var.translate",
					"translate3.ty": "var.translate",
					"render.shadow_opacity": "if(death_time == 0, 1, (20 - death_time) / 20)",
					"render.shadow_size": 0.75,
					"left_rein_visible.visible": "if(death_time > 0, 0, 1) > 0",
					"right_rein_visible.visible": "if(death_time > 0, 0, 1) > 0"
				},
				{
					"cancel.rx": "-front_left_leg.rx"
				},
				{
					"head_rear_cancel.rx": "-body.rx",
					"saddle_head_rear_cancel.rx": "-body.rx",
					"head2.rx": "neck.rx",
					"head2.ry": "neck.ry",
					"head2.ty": "if(rule_index == 1, -12.8, -11) + neck.ty",
					"head2.tz": "if(rule_index == 1, -4.7, -5) + neck.tz",
					"head2.sx": "var.babyhead",
					"head2.sy": "var.babyhead",
					"head2.sz": "var.babyhead",
					"saddle_head.rx": "neck.rx",
					"saddle_head.ry": "neck.ry",
					"saddle_head.ty": "if(rule_index == 1, -12.8, -11) + neck.ty",
					"saddle_head.tz": "if(rule_index == 1, -4.7, -5) + neck.tz",
					"saddle_head.sx": "var.babyhead",
					"saddle_head.sy": "var.babyhead",
					"saddle_head.sz": "var.babyhead",
					"leg_rear_cancel.ty": "1 - front_left_leg.ty",
					"leg_rear_cancel.tz": "-4 - front_left_leg.tz",
					"front_left_leg2.rx": "front_left_leg.rx",
					"front_right_leg2.rx": "front_right_leg.rx",
					"back_left_leg2.rx": "back_left_leg.rx",
					"back_right_leg2.rx": "back_right_leg.rx"
				},
				{
					"var.deltatime": "frame_time * 20",
					"var.a": "if(is_in_water, 0.1, 1)"
				},
				{
					"var.position_check_head_y": "var.position_head_y + var.velocity_head_tyz * sin(head2.rx + var.velocity_angle_head) * var.deltatime",
					"var.position_check_head_z": "1.5 + var.position_head_z + var.velocity_head_tyz * cos(head2.rx + var.velocity_angle_head) * var.deltatime",
					"var.position_check_mouth_y": "var.position_mouth_y + var.velocity_mouth_tyz * sin(head2.rx + var.velocity_angle_mouth) * var.deltatime",
					"var.position_check_mouth_z": "-4.5 + var.position_mouth_z + var.velocity_mouth_tyz * cos(head2.rx + var.velocity_angle_mouth) * var.deltatime",
					"var.position_check_neck_y": "var.position_neck_y + var.velocity_neck_tyz * sin(head2.rx + var.velocity_angle_neck) * var.deltatime",
					"var.position_check_neck_z": "1.5 + var.position_neck_z + var.velocity_neck_tyz * cos(head2.rx + var.velocity_angle_neck) * var.deltatime",
					"var.position_check_mane_y": "var.position_mane_y + var.velocity_mane_tyz * sin(head2.rx + var.velocity_angle_mane) * var.deltatime",
					"var.position_check_mane_z": "6 + var.position_mane_z + var.velocity_mane_tyz * cos(head2.rx + var.velocity_angle_mane) * var.deltatime",
					"var.position_check_body_y": "var.position_body_y + var.velocity_body_tyz * sin(body.rx + var.velocity_angle_body) * var.deltatime",
					"var.position_check_body_z": "-6 + var.position_body_z + var.velocity_body_tyz * cos(body.rx + var.velocity_angle_body) * var.deltatime",
					"var.position_check_front_left_leg_y": "var.position_front_left_leg_y + var.velocity_front_left_leg_tyz * sin(front_left_leg2.rx + var.velocity_angle_front_left_leg) * var.deltatime",
					"var.position_check_front_left_leg_z": "var.position_front_left_leg_z + var.velocity_front_left_leg_tyz * cos(front_left_leg2.rx + var.velocity_angle_front_left_leg) * var.deltatime",
					"var.position_check_front_right_leg_y": "var.position_front_right_leg_y + var.velocity_front_right_leg_tyz * sin(front_left_leg2.rx + var.velocity_angle_front_right_leg) * var.deltatime",
					"var.position_check_front_right_leg_z": "var.position_front_right_leg_z + var.velocity_front_right_leg_tyz * cos(front_left_leg2.rx + var.velocity_angle_front_right_leg) * var.deltatime",
					"var.position_check_back_left_leg_y": "var.position_back_left_leg_y + var.velocity_back_left_leg_tyz * sin(back_left_leg2.rx + var.velocity_angle_back_left_leg) * var.deltatime",
					"var.position_check_back_left_leg_z": "-1 + var.position_back_left_leg_z + var.velocity_back_left_leg_tyz * cos(back_left_leg2.rx + var.velocity_angle_back_left_leg) * var.deltatime",
					"var.position_check_back_right_leg_y": "var.position_back_right_leg_y + var.velocity_back_right_leg_tyz * sin(back_right_leg2.rx + var.velocity_angle_back_right_leg) * var.deltatime",
					"var.position_check_back_right_leg_z": "-1 + var.position_back_right_leg_z + var.velocity_back_right_leg_tyz * cos(back_right_leg2.rx + var.velocity_angle_back_right_leg) * var.deltatime"
				},
				{
					"var.floor_head": "if(is_in_water || sqrt(var.position_check_head_y * var.position_check_head_y + var.position_check_head_z * var.position_check_head_z) * sin(-head2.rx + atan2(var.position_check_head_y, var.position_check_head_z)) <= 20 - neck.ty + 8.5 * sin(head2.rx + pi / 2), 1, 0.5)",
					"var.floor_mouth": "if(is_in_water || sqrt(var.position_check_mouth_y * var.position_check_mouth_y + var.position_check_mouth_z * var.position_check_mouth_z) * sin(-head2.rx + atan2(var.position_check_mouth_y, var.position_check_mouth_z)) <= 20 - neck.ty + 8.5 * sin(head2.rx + pi / 2), 1, 0.5)",
					"var.floor_neck": "if(is_in_water || sqrt(var.position_check_neck_y * var.position_check_neck_y + var.position_check_neck_z * var.position_check_neck_z) * sin(-head2.rx + atan2(var.position_check_neck_y, var.position_check_neck_z)) <= 20 - neck.ty, 1, 0.5)",
					"var.floor_mane": "if(is_in_water || sqrt(var.position_check_mane_y * var.position_check_mane_y + var.position_check_mane_z * var.position_check_mane_z) * sin(-head2.rx + atan2(var.position_check_mane_y, var.position_check_mane_z)) <= 20 - neck.ty + 3 * sin(head2.rx + pi / 2), 1, 0.5)",
					"var.floor_body": "if(is_in_water || sqrt(var.position_check_body_y * var.position_check_body_y + var.position_check_body_z * var.position_check_body_z) * sin(-body.rx + atan2(var.position_check_body_y, var.position_check_body_z)) <= 20 - body.ty + 3 * sin(body.rx + pi / 2), 1, 0.5)",
					"var.floor_front_left_leg": "if(is_in_water || sqrt(var.position_check_front_left_leg_y * var.position_check_front_left_leg_y + var.position_check_front_left_leg_z * var.position_check_front_left_leg_z) * sin(-front_left_leg2.rx + atan2(var.position_check_front_left_leg_y, var.position_check_front_left_leg_z)) <= 20 - front_left_leg.ty + -4.5 * sin(front_left_leg2.rx + pi / 2), 1, 0.5)",
					"var.floor_front_right_leg": "if(is_in_water || sqrt(var.position_check_front_right_leg_y * var.position_check_front_right_leg_y + var.position_check_front_right_leg_z * var.position_check_front_right_leg_z) * sin(-front_right_leg2.rx + atan2(var.position_check_front_right_leg_y, var.position_check_front_right_leg_z)) <= 20 - front_right_leg.ty + -4.5 * sin(front_right_leg2.rx + pi / 2), 1, 0.5)",
					"var.floor_back_left_leg": "if(is_in_water || sqrt(var.position_check_back_left_leg_y * var.position_check_back_left_leg_y + var.position_check_back_left_leg_z * var.position_check_back_left_leg_z) * sin(-back_left_leg2.rx + atan2(var.position_check_back_left_leg_y, var.position_check_back_left_leg_z)) <= 20 - back_left_leg.ty + -4.5 * sin(back_left_leg2.rx + pi / 2), 1, 0.5)",
					"var.floor_back_right_leg": "if(is_in_water || sqrt(var.position_check_back_right_leg_y * var.position_check_back_right_leg_y + var.position_check_back_right_leg_z * var.position_check_back_right_leg_z) * sin(-back_right_leg2.rx + atan2(var.position_check_back_right_leg_y, var.position_check_back_right_leg_z)) <= 20 - back_right_leg.ty + -4.5 * sin(back_right_leg2.rx + pi / 2), 1, 0.5)"
				},
				{
					"var.velocity_head_tx": "if(death_time > 0, var.floor_head * var.velocity_head_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_head_ty": "if(death_time > 0, if(var.floor_head == 1, 1, -var.floor_head) * var.velocity_head_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_head_tz": "if(death_time > 0, var.floor_head * var.velocity_head_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_head_rx": "if(death_time > 0, var.floor_head * var.velocity_head_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_head_ry": "if(death_time > 0, var.floor_head * var.velocity_head_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_head_tyz": "sqrt(var.velocity_head_ty * var.velocity_head_ty + var.velocity_head_tz * var.velocity_head_tz)",
					"var.velocity_angle_head": "atan2(var.velocity_head_ty, var.velocity_head_tz)"
				},
				{
					"var.position_head_x": "var.position_head_x + var.velocity_head_tx * var.deltatime",
					"var.position_head_y": "var.position_head_y + var.velocity_head_tyz * sin(head2.rx + var.velocity_angle_head) * var.deltatime",
					"var.position_head_z": "var.position_head_z + var.velocity_head_tyz * cos(head2.rx + var.velocity_angle_head) * var.deltatime",
					"var.rotation_head_x": "var.rotation_head_x + var.velocity_head_rx * var.deltatime",
					"var.rotation_head_y": "var.rotation_head_y + var.velocity_head_ry * var.deltatime"
				},
				{
					"physics_head.tx": "var.position_head_x",
					"physics_head.ty": "-8.5 + var.position_head_y",
					"physics_head.tz": "1.5 + var.position_head_z",
					"physics_head.rx": "var.rotation_head_x",
					"physics_head.ry": "var.rotation_head_y"
				},
				{
					"physics_headpiece.tx": "physics_head.tx",
					"physics_headpiece.ty": "physics_head.ty",
					"physics_headpiece.tz": "physics_head.tz",
					"physics_headpiece.rx": "physics_head.rx",
					"physics_headpiece.ry": "physics_head.ry"
				},
				{
					"var.velocity_mouth_tx": "if(death_time > 0, var.floor_mouth * var.velocity_mouth_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_mouth_ty": "if(death_time > 0, if(var.floor_mouth == 1, 1, -var.floor_mouth) * var.velocity_mouth_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_mouth_tz": "if(death_time > 0, var.floor_mouth * var.velocity_mouth_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_mouth_rx": "if(death_time > 0, var.floor_mouth * var.velocity_mouth_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_mouth_ry": "if(death_time > 0, var.floor_mouth * var.velocity_mouth_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_mouth_tyz": "sqrt(var.velocity_mouth_ty * var.velocity_mouth_ty + var.velocity_mouth_tz * var.velocity_mouth_tz)",
					"var.velocity_angle_mouth": "atan2(var.velocity_mouth_ty, var.velocity_mouth_tz)"
				},
				{
					"var.position_mouth_x": "var.position_mouth_x + var.velocity_mouth_tx * var.deltatime",
					"var.position_mouth_y": "var.position_mouth_y + var.velocity_mouth_tyz * sin(head2.rx + var.velocity_angle_mouth) * var.deltatime",
					"var.position_mouth_z": "var.position_mouth_z + var.velocity_mouth_tyz * cos(head2.rx + var.velocity_angle_mouth) * var.deltatime",
					"var.rotation_mouth_x": "var.rotation_mouth_x + var.velocity_mouth_rx * var.deltatime",
					"var.rotation_mouth_y": "var.rotation_mouth_y + var.velocity_mouth_ry * var.deltatime"
				},
				{
					"physics_mouth.tx": "var.position_mouth_x",
					"physics_mouth.ty": "-8.5 + var.position_mouth_y",
					"physics_mouth.tz": "-4.5 + var.position_mouth_z",
					"physics_mouth.rx": "var.rotation_mouth_x",
					"physics_mouth.ry": "var.rotation_mouth_y"
				},
				{
					"physics_noseband.tx": "physics_mouth.tx",
					"physics_noseband.ty": "physics_mouth.ty",
					"physics_noseband.tz": "physics_mouth.tz",
					"physics_noseband.rx": "physics_mouth.rx",
					"physics_noseband.ry": "physics_mouth.ry"
				},
				{
					"var.velocity_neck_tx": "if(death_time > 0, var.floor_neck * var.velocity_neck_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_neck_ty": "if(death_time > 0, if(var.floor_neck == 1, 1, -var.floor_neck) * var.velocity_neck_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_neck_tz": "if(death_time > 0, var.floor_neck * var.velocity_neck_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_neck_rx": "if(death_time > 0, var.floor_neck * var.velocity_neck_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_neck_ry": "if(death_time > 0, var.floor_neck * var.velocity_neck_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_neck_tyz": "sqrt(var.velocity_neck_ty * var.velocity_neck_ty + var.velocity_neck_tz * var.velocity_neck_tz)",
					"var.velocity_angle_neck": "atan2(var.velocity_neck_ty, var.velocity_neck_tz)"
				},
				{
					"var.position_neck_x": "var.position_neck_x + var.velocity_neck_tx * var.deltatime",
					"var.position_neck_y": "var.position_neck_y + var.velocity_neck_tyz * sin(head2.rx + var.velocity_angle_neck) * var.deltatime",
					"var.position_neck_z": "var.position_neck_z + var.velocity_neck_tyz * cos(head2.rx + var.velocity_angle_neck) * var.deltatime",
					"var.rotation_neck_x": "var.rotation_neck_x + var.velocity_neck_rx * var.deltatime",
					"var.rotation_neck_y": "var.rotation_neck_y + var.velocity_neck_ry * var.deltatime"
				},
				{
					"physics_neck.tx": "var.position_neck_x",
					"physics_neck.ty": "var.position_neck_y",
					"physics_neck.tz": "1.5 + var.position_neck_z",
					"physics_neck.rx": "var.rotation_neck_x",
					"physics_neck.ry": "var.rotation_neck_y"
				},
				{
					"var.velocity_mane_tx": "if(death_time > 0, var.floor_mane * var.velocity_mane_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_mane_ty": "if(death_time > 0, if(var.floor_mane == 1, 1, -var.floor_mane) * var.velocity_mane_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_mane_tz": "if(death_time > 0, var.floor_mane * var.velocity_mane_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_mane_rx": "if(death_time > 0, var.floor_mane * var.velocity_mane_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_mane_ry": "if(death_time > 0, var.floor_mane * var.velocity_mane_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_mane_tyz": "sqrt(var.velocity_mane_ty * var.velocity_mane_ty + var.velocity_mane_tz * var.velocity_mane_tz)",
					"var.velocity_angle_mane": "atan2(var.velocity_mane_ty, var.velocity_mane_tz)"
				},
				{
					"var.position_mane_x": "var.position_mane_x + var.velocity_mane_tx * var.deltatime",
					"var.position_mane_y": "var.position_mane_y + var.velocity_mane_tyz * sin(head2.rx + var.velocity_angle_mane) * var.deltatime",
					"var.position_mane_z": "var.position_mane_z + var.velocity_mane_tyz * cos(head2.rx + var.velocity_angle_mane) * var.deltatime",
					"var.rotation_mane_x": "var.rotation_mane_x + var.velocity_mane_rx * var.deltatime",
					"var.rotation_mane_y": "var.rotation_mane_y + var.velocity_mane_ry * var.deltatime"
				},
				{
					"physics_mane.tx": "var.position_mane_x",
					"physics_mane.ty": "-3 + var.position_mane_y",
					"physics_mane.tz": "6 + var.position_mane_z",
					"physics_mane.rx": "var.rotation_mane_x",
					"physics_mane.ry": "var.rotation_mane_y"
				},
				{
					"var.velocity_body_tx": "if(death_time > 0, var.floor_body * var.velocity_body_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_body_ty": "if(death_time > 0, if(var.floor_body == 1, 1, -var.floor_body) * var.velocity_body_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_body_tz": "if(death_time > 0, var.floor_body * var.velocity_body_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_body_rx": "if(death_time > 0, var.floor_body * var.velocity_body_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_body_ry": "if(death_time > 0, var.floor_body * var.velocity_body_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_body_tyz": "sqrt(var.velocity_body_ty * var.velocity_body_ty + var.velocity_body_tz * var.velocity_body_tz)",
					"var.velocity_angle_body": "atan2(var.velocity_body_ty, var.velocity_body_tz)"
				},
				{
					"var.position_body_x": "var.position_body_x + var.velocity_body_tx * var.deltatime",
					"var.position_body_y": "var.position_body_y + var.velocity_body_tyz * sin(body.rx + var.velocity_angle_body) * var.deltatime",
					"var.position_body_z": "var.position_body_z + var.velocity_body_tyz * cos(body.rx + var.velocity_angle_body) * var.deltatime",
					"var.rotation_body_x": "var.rotation_body_x + var.velocity_body_rx * var.deltatime",
					"var.rotation_body_y": "var.rotation_body_y + var.velocity_body_ry * var.deltatime"
				},
				{
					"physics_body.tx": "var.position_body_x",
					"physics_body.ty": "-16 + var.position_body_y",
					"physics_body.tz": "var.position_body_z",
					"physics_body.rx": "var.rotation_body_x",
					"physics_body.ry": "var.rotation_body_y"
				},
				{
					"physics_saddle.tx": "physics_body.tx",
					"physics_saddle.ty": "physics_body.ty",
					"physics_saddle.tz": "physics_body.tz",
					"physics_saddle.rx": "physics_body.rx",
					"physics_saddle.ry": "physics_body.ry"
				},
				{
					"var.velocity_front_left_leg_tx": "if(death_time > 0, var.floor_front_left_leg * var.velocity_front_left_leg_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_front_left_leg_ty": "if(death_time > 0, if(var.floor_front_left_leg == 1, 1, -var.floor_front_left_leg) * var.velocity_front_left_leg_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_front_left_leg_tz": "if(death_time > 0, var.floor_front_left_leg * var.velocity_front_left_leg_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_front_left_leg_rx": "if(death_time > 0, var.floor_front_left_leg * var.velocity_front_left_leg_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_front_left_leg_ry": "if(death_time > 0, var.floor_front_left_leg * var.velocity_front_left_leg_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_front_left_leg_tyz": "sqrt(var.velocity_front_left_leg_ty * var.velocity_front_left_leg_ty + var.velocity_front_left_leg_tz * var.velocity_front_left_leg_tz)",
					"var.velocity_angle_front_left_leg": "atan2(var.velocity_front_left_leg_ty, var.velocity_front_left_leg_tz)"
				},
				{
					"var.position_front_left_leg_x": "var.position_front_left_leg_x + var.velocity_front_left_leg_tx * var.deltatime",
					"var.position_front_left_leg_y": "var.position_front_left_leg_y + var.velocity_front_left_leg_tyz * sin(front_left_leg2.rx + var.velocity_angle_front_left_leg) * var.deltatime",
					"var.position_front_left_leg_z": "var.position_front_left_leg_z + var.velocity_front_left_leg_tyz * cos(front_left_leg2.rx + var.velocity_angle_front_left_leg) * var.deltatime",
					"var.rotation_front_left_leg_x": "var.rotation_front_left_leg_x + var.velocity_front_left_leg_rx * var.deltatime",
					"var.rotation_front_left_leg_y": "var.rotation_front_left_leg_y + var.velocity_front_left_leg_ry * var.deltatime"
				},
				{
					"physics_front_left_leg.tx": "-1 + var.position_front_left_leg_x",
					"physics_front_left_leg.ty": "4.5 + var.position_front_left_leg_y",
					"physics_front_left_leg.tz": "0.1 + var.position_front_left_leg_z",
					"physics_front_left_leg.rx": "var.rotation_front_left_leg_x",
					"physics_front_left_leg.ry": "var.rotation_front_left_leg_y"
				},
				{
					"var.velocity_front_right_leg_tx": "if(death_time > 0, var.floor_front_right_leg * var.velocity_front_right_leg_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_front_right_leg_ty": "if(death_time > 0, if(var.floor_front_right_leg == 1, 1, -var.floor_front_right_leg) * var.velocity_front_right_leg_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_front_right_leg_tz": "if(death_time > 0, var.floor_front_right_leg * var.velocity_front_right_leg_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_front_right_leg_rx": "if(death_time > 0, var.floor_front_right_leg * var.velocity_front_right_leg_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_front_right_leg_ry": "if(death_time > 0, var.floor_front_right_leg * var.velocity_front_right_leg_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_front_right_leg_tyz": "sqrt(var.velocity_front_right_leg_ty * var.velocity_front_right_leg_ty + var.velocity_front_right_leg_tz * var.velocity_front_right_leg_tz)",
					"var.velocity_angle_front_right_leg": "atan2(var.velocity_front_right_leg_ty, var.velocity_front_right_leg_tz)"
				},
				{
					"var.position_front_right_leg_x": "var.position_front_right_leg_x + var.velocity_front_right_leg_tx * var.deltatime",
					"var.position_front_right_leg_y": "var.position_front_right_leg_y + var.velocity_front_right_leg_tyz * sin(front_right_leg2.rx + var.velocity_angle_front_right_leg) * var.deltatime",
					"var.position_front_right_leg_z": "var.position_front_right_leg_z + var.velocity_front_right_leg_tyz * cos(front_right_leg2.rx + var.velocity_angle_front_right_leg) * var.deltatime",
					"var.rotation_front_right_leg_x": "var.rotation_front_right_leg_x + var.velocity_front_right_leg_rx * var.deltatime",
					"var.rotation_front_right_leg_y": "var.rotation_front_right_leg_y + var.velocity_front_right_leg_ry * var.deltatime"
				},
				{
					"physics_front_right_leg.tx": "1 + var.position_front_right_leg_x",
					"physics_front_right_leg.ty": "4.5 + var.position_front_right_leg_y",
					"physics_front_right_leg.tz": "0.1 + var.position_front_right_leg_z",
					"physics_front_right_leg.rx": "var.rotation_front_right_leg_x",
					"physics_front_right_leg.ry": "var.rotation_front_right_leg_y"
				},
				{
					"var.velocity_back_left_leg_tx": "if(death_time > 0, var.floor_back_left_leg * var.velocity_back_left_leg_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_back_left_leg_ty": "if(death_time > 0, if(var.floor_back_left_leg == 1, 1, -var.floor_back_left_leg) * var.velocity_back_left_leg_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_back_left_leg_tz": "if(death_time > 0, var.floor_back_left_leg * var.velocity_back_left_leg_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_back_left_leg_rx": "if(death_time > 0, var.floor_back_left_leg * var.velocity_back_left_leg_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_back_left_leg_ry": "if(death_time > 0, var.floor_back_left_leg * var.velocity_back_left_leg_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_back_left_leg_tyz": "sqrt(var.velocity_back_left_leg_ty * var.velocity_back_left_leg_ty + var.velocity_back_left_leg_tz * var.velocity_back_left_leg_tz)",
					"var.velocity_angle_back_left_leg": "atan2(var.velocity_back_left_leg_ty, var.velocity_back_left_leg_tz)"
				},
				{
					"var.position_back_left_leg_x": "var.position_back_left_leg_x + var.velocity_back_left_leg_tx * var.deltatime",
					"var.position_back_left_leg_y": "var.position_back_left_leg_y + var.velocity_back_left_leg_tyz * sin(back_left_leg2.rx + var.velocity_angle_back_left_leg) * var.deltatime",
					"var.position_back_left_leg_z": "var.position_back_left_leg_z + var.velocity_back_left_leg_tyz * cos(back_left_leg2.rx + var.velocity_angle_back_left_leg) * var.deltatime",
					"var.rotation_back_left_leg_x": "var.rotation_back_left_leg_x + var.velocity_back_left_leg_rx * var.deltatime",
					"var.rotation_back_left_leg_y": "var.rotation_back_left_leg_y + var.velocity_back_left_leg_ry * var.deltatime"
				},
				{
					"physics_back_left_leg.tx": "-1 + var.position_back_left_leg_x",
					"physics_back_left_leg.ty": "4.5 + var.position_back_left_leg_y",
					"physics_back_left_leg.tz": "1 + var.position_back_left_leg_z",
					"physics_back_left_leg.rx": "var.rotation_back_left_leg_x",
					"physics_back_left_leg.ry": "var.rotation_back_left_leg_y"
				},
				{
					"var.velocity_back_right_leg_tx": "if(death_time > 0, var.floor_back_right_leg * var.velocity_back_right_leg_tx - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_back_right_leg_ty": "if(death_time > 0, if(var.floor_back_right_leg == 1, 1, -var.floor_back_right_leg) * var.velocity_back_right_leg_ty + var.a * var.deltatime - var.first_frame * random() * if(is_in_water, 1, 2), 0)",
					"var.velocity_back_right_leg_tz": "if(death_time > 0, var.floor_back_right_leg * var.velocity_back_right_leg_tz - var.first_frame * (random() - 0.5) * if(is_in_water, 2, 4), 0)",
					"var.velocity_back_right_leg_rx": "if(death_time > 0, var.floor_back_right_leg * var.velocity_back_right_leg_rx - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_back_right_leg_ry": "if(death_time > 0, var.floor_back_right_leg * var.velocity_back_right_leg_ry - var.first_frame * (random() - 0.5) * if(is_in_water, 0.5, 1), 0)",
					"var.velocity_back_right_leg_tyz": "sqrt(var.velocity_back_right_leg_ty * var.velocity_back_right_leg_ty + var.velocity_back_right_leg_tz * var.velocity_back_right_leg_tz)",
					"var.velocity_angle_back_right_leg": "atan2(var.velocity_back_right_leg_ty, var.velocity_back_right_leg_tz)"
				},
				{
					"var.position_back_right_leg_x": "var.position_back_right_leg_x + var.velocity_back_right_leg_tx * var.deltatime",
					"var.position_back_right_leg_y": "var.position_back_right_leg_y + var.velocity_back_right_leg_tyz * sin(back_right_leg2.rx + var.velocity_angle_back_right_leg) * var.deltatime",
					"var.position_back_right_leg_z": "var.position_back_right_leg_z + var.velocity_back_right_leg_tyz * cos(back_right_leg2.rx + var.velocity_angle_back_right_leg) * var.deltatime",
					"var.rotation_back_right_leg_x": "var.rotation_back_right_leg_x + var.velocity_back_right_leg_rx * var.deltatime",
					"var.rotation_back_right_leg_y": "var.rotation_back_right_leg_y + var.velocity_back_right_leg_ry * var.deltatime"
				},
				{
					"physics_back_right_leg.tx": "1 + var.position_back_right_leg_x",
					"physics_back_right_leg.ty": "4.5 + var.position_back_right_leg_y",
					"physics_back_right_leg.tz": "1 + var.position_back_right_leg_z",
					"physics_back_right_leg.rx": "var.rotation_back_right_leg_x",
					"physics_back_right_leg.ry": "var.rotation_back_right_leg_y"
				},
				{
					"var.first_frame": "if(death_time > 0, 0, 1)"
				},
				{
					"var.by_ewan_howell": 0
				}
			]
		},
		{
			"part": "front_left_leg",
			"id": "front_left_leg",
			"invertAxis": "xy",
			"translate": [4, -10, 9],
			"submodels": [
				{
					"id": "cancel",
					"invertAxis": "xy",
					"translate": [-4, 10, -9],
					"submodels": [
						{
							"id": "rotate2",
							"invertAxis": "xy",
							"translate": [4, -10, 9],
							"submodels": [
								{
									"id": "translate2",
									"invertAxis": "xy",
									"translate": [0, 0, 0],
									"submodels": [
										{
											"id": "front_left_leg2",
											"invertAxis": "xy",
											"translate": [-4, 10, -9],
											"submodels": [
												{
													"id": "physics_front_left_leg",
													"invertAxis": "xy",
													"translate": [1, -4.5, 0.1],
													"boxes": [
														{
															"coordinates": [-2, -5.5, -2, 4, 11, 4],
															"uvNorth": [56, 25, 52, 36],
															"uvEast": [60, 25, 56, 36],
															"uvSouth": [64, 25, 60, 36],
															"uvWest": [52, 25, 48, 36],
															"uvUp": [52, 25, 56, 21],
															"uvDown": [56, 21, 60, 25]
														}
													]
												}
											]
										},
										{
											"id": "front_right_leg2",
											"invertAxis": "xy",
											"translate": [4, 10, -9],
											"submodels": [
												{
													"id": "physics_front_right_leg",
													"invertAxis": "xy",
													"translate": [-1, -4.5, 0.1],
													"boxes": [
														{
															"coordinates": [-2, -5.5, -2, 4, 11, 4],
															"uvNorth": [52, 25, 56, 36],
															"uvEast": [48, 25, 52, 36],
															"uvSouth": [60, 25, 64, 36],
															"uvWest": [56, 25, 60, 36],
															"uvUp": [56, 25, 52, 21],
															"uvDown": [60, 21, 56, 25]
														}
													]
												}
											]
										},
										{
											"id": "leg_rear_cancel",
											"invertAxis": "xy",
											"translate": [0, 13, 6],
											"submodels": [
												{
													"id": "back_left_leg2",
													"invertAxis": "xy",
													"translate": [-4, -3, 2],
													"submodels": [
														{
															"id": "physics_back_left_leg",
															"invertAxis": "xy",
															"translate": [1, -4.5, 1],
															"boxes": [
																{
																	"coordinates": [-2, -5.5, -2, 4, 11, 4],
																	"uvNorth": [56, 25, 52, 36],
																	"uvEast": [60, 25, 56, 36],
																	"uvSouth": [64, 25, 60, 36],
																	"uvWest": [52, 25, 48, 36],
																	"uvUp": [52, 25, 56, 21],
																	"uvDown": [56, 21, 60, 25]
																}
															]
														}
													]
												},
												{
													"id": "back_right_leg2",
													"invertAxis": "xy",
													"translate": [4, -3, 2],
													"submodels": [
														{
															"id": "physics_back_right_leg",
															"invertAxis": "xy",
															"translate": [-1, -4.5, 1],
															"boxes": [
																{
																	"coordinates": [-2, -5.5, -2, 4, 11, 4],
																	"uvNorth": [52, 25, 56, 36],
																	"uvEast": [48, 25, 52, 36],
																	"uvSouth": [60, 25, 64, 36],
																	"uvWest": [56, 25, 60, 36],
																	"uvUp": [56, 25, 52, 21],
																	"uvDown": [60, 21, 56, 25]
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"part": "saddle",
			"id": "saddle",
			"invertAxis": "xy",
			"translate": [0, -13, -6],
			"submodels": [
				{
					"id": "rotate3",
					"invertAxis": "xy",
					"translate": [0, 0, 0],
					"submodels": [
						{
							"id": "translate3",
							"invertAxis": "xy",
							"translate": [0, 0, 0],
							"submodels": [
								{
									"id": "physics_saddle",
									"invertAxis": "xy",
									"translate": [0, 16, 0],
									"boxes": [
										{
											"coordinates": [-5, -4, -3, 10, 9, 9],
											"uvNorth": [35, 9, 45, 18],
											"uvEast": [26, 9, 35, 18],
											"uvSouth": [54, 9, 64, 18],
											"uvWest": [45, 9, 54, 18],
											"uvUp": [45, 9, 35, 0],
											"uvDown": [55, 0, 45, 9],
											"sizeAdd": 0.5
										}
									]
								},
								{
									"id": "saddle_head_rear_cancel",
									"invertAxis": "xy",
									"translate": [0, 13, 6],
									"submodels": [
										{
											"id": "saddle_head",
											"invertAxis": "xy",
											"translate": [0, 7, -17],
											"submodels": [
												{
													"id": "physics_headpiece",
													"invertAxis": "xy",
													"translate": [0, 8.5, 1.5],
													"boxes": [
														{
															"coordinates": [-3, -2.5, -3.5, 6, 5, 6],
															"uvNorth": [7, 7, 13, 12],
															"uvEast": [1, 7, 7, 12],
															"uvSouth": [19, 7, 25, 12],
															"uvWest": [13, 7, 19, 12],
															"uvUp": [13, 7, 7, 1],
															"uvDown": [19, 1, 13, 7],
															"sizeAdd": 0.2
														}
													]
												},
												{
													"id": "physics_noseband",
													"invertAxis": "xy",
													"translate": [0, 8.5, -4.5],
													"boxes": [
														{
															"coordinates": [-3, -1.5, -1.5, 1, 2, 2],
															"uvNorth": [31, 7, 32, 9],
															"uvEast": [29, 7, 31, 9],
															"uvSouth": [34, 7, 35, 9],
															"uvWest": [32, 7, 34, 9],
															"uvUp": [32, 7, 31, 5],
															"uvDown": [33, 5, 32, 7]
														},
														{
															"coordinates": [2, -1.5, -1.5, 1, 2, 2],
															"uvNorth": [31, 7, 32, 9],
															"uvEast": [29, 7, 31, 9],
															"uvSouth": [34, 7, 35, 9],
															"uvWest": [32, 7, 34, 9],
															"uvUp": [32, 7, 31, 5],
															"uvDown": [33, 5, 32, 7]
														},
														{
															"coordinates": [-2, -2.5, 0.5, 4, 5, 2],
															"uvNorth": [21, 2, 25, 7],
															"uvEast": [19, 2, 21, 7],
															"uvSouth": [27, 2, 31, 7],
															"uvWest": [25, 2, 27, 7],
															"uvUp": [25, 2, 21, 0],
															"uvDown": [29, 0, 25, 2],
															"sizeAdd": 0.2
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"part": "left_rein",
			"id": "left_rein",
			"invertAxis": "xy",
			"translate": [0, -25.5, 5.5],
			"submodels": [
				{
					"id": "left_rein_visible",
					"invertAxis": "xy",
					"translate": [0, 0, 0],
					"boxes": [
						{
							"coordinates": [-3.1, 28.5, -13.5, 0, 3, 16],
							"uvEast": [32, 18, 48, 21],
							"uvWest": [48, 18, 64, 21]
						}
					]
				}
			]
		},
		{
			"part": "right_rein",
			"id": "right_rein",
			"invertAxis": "xy",
			"translate": [0, -25.5, 5.5],
			"submodels": [
				{
					"id": "right_rein_visible",
					"invertAxis": "xy",
					"translate": [0, 0, 0],
					"boxes": [
						{
							"coordinates": [3.1, 28.5, -13.5, 0, 3, 16],
							"uvEast": [32, 18, 48, 21],
							"uvWest": [48, 18, 64, 21]
						}
					]
				}
			]
		}
	]
}